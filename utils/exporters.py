# utils/exporters.py
from __future__ import annotations
import base64
from pathlib import Path
from typing import Dict, Any, List

def _b64_img(path: Path) -> str:
    with open(path, "rb") as f:
        return base64.b64encode(f.read()).decode("ascii")

def compose_export_html(
    plan: Dict[str, Any],
    images_dir: Path,
    *,
    max_thumbnails: int = 12
) -> str:
    """
    Build a self-contained HTML page:
      - Embeds the plan fragment.
      - Embeds exercise thumbnails (base64) found under images_dir.
    """
    title = plan.get("summary", {}).get("title", "Workout Plan")
    fragment = (plan.get("plan_html_fragment") or "").strip()
    blocks = plan.get("blocks") or []

    # Unique list of exercise titles to look for images
    exercise_titles: List[str] = []
    for blk in blocks:
        for ex in blk.get("exercises", []):
            t = (ex.get("title") or "").strip()
            if t and t not in exercise_titles:
                exercise_titles.append(t)
    exercise_titles = exercise_titles[:max_thumbnails]

    # Map titles -> local PNGs (safe filename logic inlined)
    import re
    thumbs: List[str] = []
    for t in exercise_titles:
        name = re.sub(r"\s+", " ", t).strip(" '\"\t\r\n")
        name = re.sub(r"[\\/<>:*?\"|]+", "_", name)
        filename = (name[:120]).rstrip("_") + ".png"
        p = images_dir / filename
        if p.exists():
            b64 = _b64_img(p)
            thumbs.append(
                f'<figure class="thumb"><img src="data:image/png;base64,{b64}" alt="{t}"><figcaption>{t}</figcaption></figure>'
            )

    css = """
    <style>
      :root{color-scheme:light dark}
      body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Arial,sans-serif;margin:24px;line-height:1.55;background:#fff;color:#111}
      h1{font-size:1.9rem;margin:0 0 .75rem 0}
      .muted{color:#666}
      .wrap{max-width:960px;margin:0 auto}
      .card{border:1px solid #eee;border-radius:16px;padding:18px;margin:14px 0;box-shadow:0 1px 10px rgba(0,0,0,.04);background:#fff}
      .thumbs{display:grid;grid-template-columns:repeat(auto-fill,minmax(180px,1fr));gap:14px;margin-top:10px}
      .thumb{border:1px solid #eee;border-radius:12px;padding:10px;background:#fafafa}
      .thumb img{width:100%;height:auto;border-radius:8px;display:block}
      .thumb figcaption{font-size:.9rem;margin-top:6px;color:#333}
      hr{border:none;border-top:1px solid #eee;margin:18px 0}
      @media print{
        body{background:#fff;color:#000}
        .card{box-shadow:none;border-color:#ccc}
      }
    </style>
    """

    thumbs_html = ""
    if thumbs:
        thumbs_html = f"""
        <div class="card">
          <h2>Exercise Thumbnails</h2>
          <div class="thumbs">
            {''.join(thumbs)}
          </div>
        </div>
        """

    page = f"""<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>{title}</title>
<meta name="viewport" content="width=device-width,initial-scale=1">
{css}
</head>
<body>
  <main class="wrap">
    <h1>{title}</h1>
    <div class="card">
      {fragment}
    </div>
    {thumbs_html}
    <hr>
    <p class="muted">Generated by Daily Workout Planner</p>
  </main>
</body>
</html>"""
    return page

def to_pdf_with_playwright(html: str) -> bytes:
    """
    Convert full HTML string to PDF using Playwright (Chromium).
    Windows-safe:
      - Forces WindowsProactorEventLoopPolicy so subprocesses work.
      - Uses Path(...).as_uri() for a correct file:// URL.
    Requires:
        pip install playwright
        python -m playwright install chromium
    """
    import sys
    import os
    import tempfile
    import asyncio
    from pathlib import Path
    from playwright.sync_api import sync_playwright

    # --- Windows asyncio fix: subprocess support requires Proactor policy ---
    if sys.platform.startswith("win"):
        try:
            asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())  # type: ignore[attr-defined]
        except Exception:
            # If the policy is already set or Python version differs, ignore.
            pass

    # Write the HTML to a temp file
    tmp_path = None
    try:
        with tempfile.NamedTemporaryFile("w", suffix=".html", encoding="utf-8", delete=False) as f:
            f.write(html)
            tmp_path = f.name

        file_uri = Path(tmp_path).resolve().as_uri()  # robust file:// URL on Windows & *nix

        with sync_playwright() as p:
            browser = p.chromium.launch(headless=True)
            context = browser.new_context()
            page = context.new_page()
            page.goto(file_uri, wait_until="load")
            page.emulate_media(media="print")
            page.wait_for_timeout(150)  # tiny settle time; base64 images load instantly

            pdf_bytes = page.pdf(
                format="A4",
                print_background=True,
                margin={"top": "12mm", "right": "12mm", "bottom": "12mm", "left": "12mm"},
                scale=1.0,
                landscape=False,
            )
            context.close()
            browser.close()
            return pdf_bytes
    finally:
        if tmp_path and os.path.exists(tmp_path):
            try:
                os.remove(tmp_path)
            except Exception:
                # Best-effort cleanup; ignore if locked by AV.
                pass
